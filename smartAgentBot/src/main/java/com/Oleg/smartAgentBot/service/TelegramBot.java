package com.Oleg.smartAgentBot.service;

import com.Oleg.smartAgentBot.config.BotConfig;
import com.Oleg.smartAgentBot.model.Apartments;
import com.Oleg.smartAgentBot.model.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

@Slf4j
@Component
public class TelegramBot extends TelegramLongPollingBot {

    final BotConfig config;

    @Autowired
    private UserService userService;


    @Autowired
    private ApartmetsService apartmentsService;

    private Map<Long, Apartments> apartmentsMap = new HashMap<>();
    private Map<Long, Integer> stepMap = new HashMap<>();

    public TelegramBot(BotConfig config) {
        this.config = config;
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    private String selectedDistrict;
    private Integer minPrice;
    private Integer maxPrice;
    private String currentFilterState; // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    private List<Apartments> userApartments;
    private boolean flag = false;


    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            User user = new User();
            user.setId(chatId);
            user.setUsername(update.getMessage().getFrom().getUserName());

            if (messageText.equals("–î–æ–±–∞–≤–∏—Ç—å ‚ûï")) {
                flag = false;

                startAddingApartment(chatId);
            } else if (apartmentsMap.containsKey(chatId)) {
                flag = false;
                processApartmentInput(chatId, messageText, user);
            } else {
                switch (messageText) {
                    case "/start":
                        SendMessage sendMessage = new SendMessage();
                        sendMessage.setChatId(chatId);
                        sendMessage.setText("–ü—Ä–∏–≤–µ—Ç! \uD83D\uDE0A –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SmartAgentBot! \uD83C\uDFE0\n" +
                                "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–∏—Å–∫–æ–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é. \uD83D\uDD0E\n" +
                                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å: \uD83D\uDC47");
                        executeMessage(sendMessage);
                        sendLoginAndRegisterButton(chatId);
                        break;
                    case "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç \uD83D\uDD14":
                        sendInfoAboutUser(chatId, user);
                        break;
                    case "–ü–æ–º–æ—â—å \uD83C\uDD98":
                        sendHelpInfo(chatId);
                        break;
                    case "–ù–∞–∑–∞–¥ ‚óÄÔ∏è\uFE0F":
                        sendLoginAndRegisterButton(chatId);
                        break;
                    case "–ü–æ–∏—Å–∫ \uD83D\uDD0D":
                        openKeyBoardTofindApartaments(chatId);
                        break;
                    case "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫":
                        showAllApartament(chatId);
                        break;
                    case "–°–ª–µ–¥—É—é—â–∏–π":
                        nextApartment(chatId);
                        break;
                    case "–ü—Ä–µ–¥—ã–¥—É—â–∏–π":
                        previousApartment(chatId);
                        break;
                    case "–§–∏–ª—å—Ç—Ä":
                        openFilterButton(chatId, messageText);
                        break;
                    case "–†–∞–π–æ–Ω":
                        flag = true;
                        showDistrictButtons(chatId);
                        break;
                    case "–¶–µ–Ω–∞ –æ—Ç":
                        currentFilterState = "–¶–µ–Ω–∞ –æ—Ç";
                        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:");
                        break;
                    case "–¶–µ–Ω–∞ –¥–æ":
                        currentFilterState = "–¶–µ–Ω–∞ –¥–æ";
                        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:");
                        break;
                    case "–ù–∞–∑–∞–¥":
                        openFilterButton(chatId, messageText);
                        break;
                    case "–ò—Å–∫–∞—Ç—å":
                        searchApartments(chatId);
                        break;
                    case "–°–±—Ä–æ—Å":
                        deleteFilter(chatId);
                        break;
                    case "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è":
                        showMyApartaments(chatId);
                        break;
                    case "–ù–∞–∑–∞–¥ –∫ –ª/–∫":
                        sendInfoAboutUser(chatId, user);
                        break;
                    case "–£–¥–∞–ª–∏—Ç—å":
                        deleteApartment(chatId, currentApartmentIndex);
                        break;
                    case "–î–∞–ª–µ–µ":
                        showNextApartment(chatId);
                        break;
                    case "–û–±—Ä–∞—Ç–Ω–æ":
                        showPreviousApartment(chatId);
                        break;
                    default:
                        handleFilterInput(chatId, messageText);
                        break;
                }
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            if(!flag) {
                handleDistrictSelection(chatId, callbackData);
            }
            else if(flag){
                handleDistrictSelection1(chatId, callbackData);
            }
        }
    }
    private void handleDistrictSelection1(long chatId, String district) {
        selectedDistrict = district;

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText("–†–∞–π–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - " + district);
        executeMessage(sendMessage);
    }


    private void showDistrictButtons(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–π–æ–Ω–æ–≤
        addDistrictButton(rowsInline, "–Æ–±–∏–ª–µ–π–Ω—ã–π", "–Æ–±–∏–ª–µ–π–Ω—ã–π");
        addDistrictButton(rowsInline, "–ß–µ—Ä—ë–º—É—à–∫–∏ / –î—É–±–∏–Ω–∫–∞", "–ß–µ—Ä—ë–º—É—à–∫–∏ / –î—É–±–∏–Ω–∫–∞");
        addDistrictButton(rowsInline, "–¶–µ–Ω—Ç—Ä", "–¶–µ–Ω—Ç—Ä");
        addDistrictButton(rowsInline, "–≠–Ω–∫–∞ / –ê–≤–∏–∞–≥–æ—Ä–æ–¥–æ–∫ üõ´/ –†–µ–ø–∏–Ω–∞", "–≠–Ω–∫–∞ / –ê–≤–∏–∞–≥–æ—Ä–æ–¥–æ–∫ üõ´/ –†–µ–ø–∏–Ω–∞");
        addDistrictButton(rowsInline, "–ú–æ–ª–æ–¥–µ–∂–Ω—ã–π / –í–∏—Ç–∞–º–∏–Ω", "–ú–æ–ª–æ–¥–µ–∂–Ω—ã–π / –í–∏—Ç–∞–º–∏–Ω");
        addDistrictButton(rowsInline, "–ó–∞–ø–∞–¥–Ω—ã–π –æ–±—Ö–æ–¥ / –ù–µ–º–µ—Ü–∫–∞—è –¥–µ—Ä–µ–≤–Ω—è", "–ó–∞–ø–∞–¥–Ω—ã–π –æ–±—Ö–æ–¥ / –ù–µ–º–µ—Ü–∫–∞—è –¥–µ—Ä–µ–≤–Ω—è");
        addDistrictButton(rowsInline, "–ó–ò–ü / –ö–ö–ë", "–ó–ò–ü / –ö–ö–ë");
        addDistrictButton(rowsInline, "–†–æ—Å—Å–∏–π—Å–∫–∏–π / –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π", "–†–æ—Å—Å–∏–π—Å–∫–∏–π / –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π");
        addDistrictButton(rowsInline, "–†–ú–ó / –•–ë–ö / –ö–°–ö", "–†–ú–ó / –•–ë–ö / –ö–°–ö");
        addDistrictButton(rowsInline, "–°–ª–∞–≤—è–Ω—Å–∫–∏–π / –†—É–±–µ—Ä–æ–∏–¥–Ω—ã–π", "–°–ª–∞–≤—è–Ω—Å–∫–∏–π / –†—É–±–µ—Ä–æ–∏–¥–Ω—ã–π");
        addDistrictButton(rowsInline, "–ì–æ—Ä—Ö—É—Ç–æ—Ä / –°–µ–≤–µ—Ä–Ω—ã–π", "–ì–æ—Ä—Ö—É—Ç–æ—Ä / –°–µ–≤–µ—Ä–Ω—ã–π");
        addDistrictButton(rowsInline, "–ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π –æ–∫—Ä—É–≥", "–ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π –æ–∫—Ä—É–≥");
        addDistrictButton(rowsInline, "–†–æ—Å—Ç–æ–≤—Å–∫–æ–µ –®–æ—Å—Å–µ", "–†–æ—Å—Ç–æ–≤—Å–∫–æ–µ –®–æ—Å—Å–µ");
        addDistrictButton(rowsInline, "–ó–Ω–∞–º–µ–Ω—Å–∫–∏–π / –ù–æ–≤–æ–∑–Ω–∞–º–µ–Ω—Å–∫–∏–π", "–ó–Ω–∞–º–µ–Ω—Å–∫–∏–π / –ù–æ–≤–æ–∑–Ω–∞–º–µ–Ω—Å–∫–∏–π");
        addDistrictButton(rowsInline, "–ì–∏–¥—Ä–æ—Å—Ç—Ä–æ–π", "–ì–∏–¥—Ä–æ—Å—Ç—Ä–æ–π");
        addDistrictButton(rowsInline, "–†–ò–ü / –ó–ò–ü / –ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "–†–ò–ü / –ó–ò–ü / –ú–æ—Å–∫–æ–≤—Å–∫–∏–π");
        addDistrictButton(rowsInline, "–Ø–±–ª–æ–Ω–æ–≤—Å–∫–∏–π / –ê–¥—ã–≥–µ—è", "–Ø–±–ª–æ–Ω–æ–≤—Å–∫–∏–π / –ê–¥—ã–≥–µ—è");
        addDistrictButton(rowsInline, "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π / –ü–∞—à–∫–æ–≤—Å–∫–∏–π", "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π / –ü–∞—à–∫–æ–≤—Å–∫–∏–π");
        addDistrictButton(rowsInline, "–ï–ª–∏–∑–∞–≤–µ—Ç–∏–Ω—Å–∫–∞—è", "–ï–ª–∏–∑–∞–≤–µ—Ç–∏–Ω—Å–∫–∞—è");
        addDistrictButton(rowsInline, "–§–µ—Å—Ç–∏–≤–∞–ª—å–Ω—ã–π / –ê–≤—Ä–æ—Ä–∞", "–§–µ—Å—Ç–∏–≤–∞–ª—å–Ω—ã–π / –ê–≤—Ä–æ—Ä–∞");
        addDistrictButton(rowsInline, "–ê—Ä–µ–Ω–¥–∞", "–ê—Ä–µ–Ω–¥–∞");
        addDistrictButton(rowsInline, "–ó–∞–ø—Ä–æ—Å—ã", "–ó–∞–ø—Ä–æ—Å—ã");
        addDistrictButton(rowsInline, "–ö–æ–º–º–µ—Ä—Ü–∏—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä –∏ –∫—Ä–∞–π", "–ö–æ–º–º–µ—Ä—Ü–∏—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä –∏ –∫—Ä–∞–π");
        addDistrictButton(rowsInline, "40 –ª–µ—Ç / –í–æ—Å—Ç–æ—á–∫–∞", "40 –ª–µ—Ç / –í–æ—Å—Ç–æ—á–∫–∞");
        addDistrictButton(rowsInline, "–¶–µ–Ω—Ç—Ä / –ó–∞–ø–∞–¥–Ω—ã–π –æ–∫—Ä—É–≥", "–¶–µ–Ω—Ç—Ä / –ó–∞–ø–∞–¥–Ω—ã–π –æ–∫—Ä—É–≥");
        addDistrictButton(rowsInline, "–ö–∞—Ä–∞—Å—É–Ω—Å–∫–∏–π –æ–∫—Ä—É–≥", "–ö–∞—Ä–∞—Å—É–Ω—Å–∫–∏–π –æ–∫—Ä—É–≥");
        addDistrictButton(rowsInline, "–ï–π—Å–∫–æ–µ —à–æ—Å—Å–µ / –Æ–∂–Ω—ã–π", "–ï–π—Å–∫–æ–µ —à–æ—Å—Å–µ / –Æ–∂–Ω—ã–π");
        addDistrictButton(rowsInline, "—Ö.–õ–µ–Ω–∏–Ω–∞ / –°—Ç–∞—Ä–æ–∫–æ—Ä—Å—É–Ω—Å–∫–∞—è", "—Ö.–õ–µ–Ω–∏–Ω–∞ / –°—Ç–∞—Ä–æ–∫–æ—Ä—Å—É–Ω—Å–∫–∞—è");
        addDistrictButton(rowsInline, "–î–∏–Ω—Å–∫–æ–π —Ä–∞–π–æ–Ω", "–î–∏–Ω—Å–∫–æ–π —Ä–∞–π–æ–Ω");

        inlineKeyboardMarkup.setKeyboard(rowsInline);
        message.setReplyMarkup(inlineKeyboardMarkup);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:");

        try {
            execute(message); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ execute –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ", e);
        }
    }



    private void addDistrictButton(List<List<InlineKeyboardButton>> rowsInline, String district, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(district);
        button.setCallbackData(callbackData);

        List<InlineKeyboardButton> rowInline = new ArrayList<>();
        rowInline.add(button);
        rowsInline.add(rowInline);
    }
    private void showMyApartaments(long chatId) {
        userApartments = apartmentsService.findApartmentsByUserId(chatId);

        if (userApartments.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.");
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è
        showApartmentWithButtons(chatId, 0);
    }

    private void showApartmentWithButtons(long chatId, int index) {
        if (index < 0 || index >= userApartments.size()) {
            sendMessage(chatId, "–ù–µ—Ç –±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.");
            return;
        }

        Apartments currentApartment = userApartments.get(index);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(currentApartment.toString());

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        KeyboardRow row2 = new KeyboardRow();
        KeyboardRow row3 = new KeyboardRow();

        row1.add("–£–¥–∞–ª–∏—Ç—å");
        row2.add("–î–∞–ª–µ–µ");
        row2.add("–û–±—Ä–∞—Ç–Ω–æ");
        row3.add("–ù–∞–∑–∞–¥ –∫ –ª/–∫");

        keyboardRows.add(row1);
        keyboardRows.add(row2);
        keyboardRows.add(row3);

        keyboardMarkup.setKeyboard(keyboardRows);
        sendMessage.setReplyMarkup(keyboardMarkup);

        executeMessage(sendMessage);
    }

    private void deleteApartment(long chatId, int index) {
        if (index >= 0 && index < userApartments.size()) {
            Apartments apartmentToDelete = userApartments.get(index);
            apartmentsService.deleteApartment(apartmentToDelete.getId());
            userApartments.remove(index);
            sendMessage(chatId, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.");
            currentApartmentIndex = Math.min(currentApartmentIndex, userApartments.size() - 1);
            showApartmentWithButtons(chatId, currentApartmentIndex);
        } else {
            sendMessage(chatId, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.");
        }
    }

    private void showNextApartment(long chatId) {
        if (currentApartmentIndex < userApartments.size() - 1) {
            currentApartmentIndex++;
        } else {
            currentApartmentIndex = 0;
        }
        showApartmentWithButtons(chatId, currentApartmentIndex);
    }

    private void showPreviousApartment(long chatId) {
        if (currentApartmentIndex > 0) {
            currentApartmentIndex--;
        } else {
            currentApartmentIndex = userApartments.size() - 1;
        }
        showApartmentWithButtons(chatId, currentApartmentIndex);
    }




    private void handleFilterInput(long chatId, String input) {
        if (currentFilterState != null) {
            switch (currentFilterState) {
                case "–¶–µ–Ω–∞ –æ—Ç":
                    handleFilterMinPrice(chatId, input);
                    break;
                case "–¶–µ–Ω–∞ –¥–æ":
                    handleFilterMaxPrice(chatId, input);
                    break;
            }
            currentFilterState = null; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
        }
    }



    private void handleFilterMinPrice(long chatId, String input) {
        try {
            minPrice = Integer.parseInt(input);
            sendMessage(chatId, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " + minPrice);
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã.");
        }
    }

    private void handleFilterMaxPrice(long chatId, String input) {
        try {
            int parsedMaxPrice = Integer.parseInt(input);
            if (minPrice != null && parsedMaxPrice < minPrice) {
                sendMessage(chatId, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã: " + minPrice);
            } else {
                maxPrice = parsedMaxPrice;
                sendMessage(chatId, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " + maxPrice);
            }
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã.");
        }
    }




    private void openFilterButton(long chatId , String messageText) {
        if (messageText.equals("–ù–∞–∑–∞–¥")) {
            apartmentsMap.remove(chatId);
            stepMap.remove(chatId);
            sendLoginAndRegisterButton(chatId);
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–£–∫–∞–∂–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é");

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        KeyboardRow row1 = new KeyboardRow();
        KeyboardRow row2 = new KeyboardRow();
        KeyboardRow row3 = new KeyboardRow();
        KeyboardRow row4 = new KeyboardRow();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∏
        row1.add("–†–∞–π–æ–Ω");
        row2.add("–¶–µ–Ω–∞ –æ—Ç");
        row2.add("–¶–µ–Ω–∞ –¥–æ");
        row3.add("–ù–∞–∑–∞–¥");
        row3.add("–ò—Å–∫–∞—Ç—å");
        row4.add("–°–±—Ä–æ—Å");

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboardRows.add(row1);
        keyboardRows.add(row2);
        keyboardRows.add(row3);
        keyboardRows.add(row4);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        executeMessage(message);
    }

    private int currentIndex = 0; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä
    private final int batchSize = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä, –≤—ã–≤–æ–¥–∏–º—ã—Ö –∑–∞ –æ–¥–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ

    private void searchApartments(long chatId) {
        List<Apartments> filteredApartments = apartmentsService.getFilteredApartments(selectedDistrict, minPrice, maxPrice);

        if (filteredApartments.isEmpty()) {
            sendMessage(chatId, "–ù–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.");
        } else {
            int endIndex = Math.min(currentIndex + batchSize, filteredApartments.size());

            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ fromIndex –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç toIndex
            if (currentIndex <= endIndex) {
                List<Apartments> batch = filteredApartments.subList(currentIndex, endIndex);

                for (Apartments apartment : batch) {
                    sendMessage(chatId, apartment.toString());
                }

                currentIndex = (currentIndex + batchSize) % filteredApartments.size();
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
                currentIndex = 0;
            }
        }
    }
    private void deleteFilter(long chatId) {
        SendMessage sendMessage = new SendMessage();
        selectedDistrict = null;
        minPrice = null;
        maxPrice = null;
        sendMessage.setChatId(chatId);
        sendMessage.setText("–§–∏–ª—å—Ä —Å–±—Ä–æ—à–µ–Ω");
    }

    private int currentApartmentIndex = 0;

    private void showAllApartament(long chatId) {
        List<Apartments> apartments = apartmentsService.findAllApartments();

        if (apartments.isEmpty()) {
            sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤.");
            return;
        }

        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
        if (currentApartmentIndex >= apartments.size()) {
            currentApartmentIndex = 0; // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        } else if (currentApartmentIndex < 0) {
            currentApartmentIndex = apartments.size() - 1; // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        }

        Apartments apartment = apartments.get(currentApartmentIndex);
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(chatId));
        sendMessage.setText(apartment.toString());

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row2 = new KeyboardRow();
        KeyboardRow row3 = new KeyboardRow();

        row2.add("–ü—Ä–µ–¥—ã–¥—É—â–∏–π");
        row2.add("–°–ª–µ–¥—É—é—â–∏–π");
        row3.add("–ù–∞–∑–∞–¥");

        keyboardRows.add(row2);
        keyboardRows.add(row3);

        keyboardMarkup.setKeyboard(keyboardRows);
        sendMessage.setReplyMarkup(keyboardMarkup);

        executeMessage(sendMessage);
    }

    private void nextApartment(long chatId) {
        currentApartmentIndex++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        showAllApartament(chatId); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    }

    private void previousApartment(long chatId) {
        currentApartmentIndex--; // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω–¥–µ–∫—Å
        showAllApartament(chatId); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    }

    private void sendMessage(long chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(chatId));
        sendMessage.setText(text);
        executeMessage(sendMessage);
    }

    private void openKeyBoardTofindApartaments(long chatId) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É,—á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–æ–π –ø–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row1 = new KeyboardRow();
        KeyboardRow row2 = new KeyboardRow();
        KeyboardRow row3 = new KeyboardRow();
        row1.add("–§–∏–ª—å—Ç—Ä");
        row2.add("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫");
        row3.add("–ù–∞–∑–∞–¥ ‚óÄÔ∏è\uFE0F");
        keyboardRows.add(row1);
        keyboardRows.add(row2);
        keyboardRows.add(row3);


        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        executeMessage(message);
    }

    private void startAddingApartment(long chatId) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Apartments –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –º–∞–ø–µ
        Apartments apartment = new Apartments();
        apartmentsMap.put(chatId, apartment);
        stepMap.put(chatId, 0);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã –Ω–∞—á–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:");

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ù–∞–∑–∞–¥ ‚óÄÔ∏è\uFE0F");

        keyboardRows.add(row1);
        keyboardMarkup.setKeyboard(keyboardRows);
        keyboardMarkup.setResizeKeyboard(true); // –£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –∫–Ω–æ–ø–∫–∏

        message.setReplyMarkup(keyboardMarkup); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        executeMessage(message);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–π–æ–Ω–æ–≤
        showDistrictButtons(chatId);
    }


    private void handleDistrictSelection(long chatId, String district) {
        Apartments apartment = apartmentsMap.get(chatId);
        if (apartment != null) {
            apartment.setDistrict(district);
            sendMessage(chatId, "–†–∞–π–æ–Ω –≤—ã–±—Ä–∞–Ω: " + district);
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            stepMap.put(chatId, 1); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:\n" +
                    "1 - –ö–≤–∞—Ä—Ç–∏—Ä–∞\n" +
                    "2 - –î–æ–º\n" +
                    "3 - –£—á–∞—Å—Ç–æ–∫\n" +
                    "4 - –ö–æ—Ç–µ–¥–∂\n");
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }
    }

    private void processApartmentInput(long chatId, String messageText, User user) {
        if (messageText.equals("–ù–∞–∑–∞–¥ ‚óÄÔ∏è\uFE0F")) {
            apartmentsMap.remove(chatId);
            stepMap.remove(chatId);
            sendLoginAndRegisterButton(chatId);
            return;
        }

        Apartments apartment = apartmentsMap.get(chatId);
        if (apartment == null) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        int step = stepMap.get(chatId);

        switch (step) {
            case 0:
                apartment.setDistrict(messageText);
                stepMap.put(chatId, 1);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:\n" +
                        "1 - –ö–≤–∞—Ä—Ç–∏—Ä–∞\n" +
                        "2 - –î–æ–º\n" +
                        "3 - –£—á–∞—Å—Ç–æ–∫\n" +
                        "4 - –ö–æ—Ç–µ–¥–∂\n");
                break;
            case 1:
                switch (messageText) {
                    case "1":
                        apartment.setName("–ö–≤–∞—Ä—Ç–∏—Ä–∞");
                        break;
                    case "2":
                        apartment.setName("–î–æ–º");
                        break;
                    case "3":
                        apartment.setName("–£—á–∞—Å—Ç–æ–∫");
                        break;
                    case "4":
                        apartment.setName("–ö–æ—Ç–µ–¥–∂");
                        break;
                    default:
                        sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è –∏–∑ —Å–ø–∏—Å–∫–∞.");
                        return;
                }
                stepMap.put(chatId, 2);
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É:");
                break;
            case 2:
                apartment.setStreet(messageText);
                stepMap.put(chatId, 3);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:");
                break;
            case 3:
                apartment.setApartmentNumber(messageText);
                stepMap.put(chatId, 4);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:");
                break;
            case 4:
                try {
                    apartment.setPrice(Double.parseDouble(messageText));
                    stepMap.put(chatId, 5);
                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.");
                }
                break;
            case 5:
                apartment.setPhoneNumber(messageText);
                stepMap.put(chatId, 6);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:");
                break;
            case 6:
                apartment.setOwnerName(messageText);
                stepMap.put(chatId, 7);
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:");
                break;
            case 7:
                apartment.setDescription(messageText);
                apartment.setUserId(chatId);
                saveApartment(chatId, apartment, user);
                apartmentsMap.remove(chatId);
                stepMap.remove(chatId);
                sendMessage(chatId, "–ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
                break;
            default:
                sendMessage(chatId, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–∞");
                break;
        }
    }

    private void saveApartment(long chatId, Apartments apartment, User user) {
        apartmentsService.save(apartment);
    }

    private void sendHelpInfo(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("SmartAgentBot: –í–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n" +
                "\n" +
                "\uD83C\uDFE0 –û–±–∑–æ—Ä –∏ –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n" +
                "\n" +
                "    –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: –õ–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã, –¥–æ–º–∞, —É—á–∞—Å—Ç–∫–∏ –∏ –∫–æ—Ç—Ç–µ–¥–∂–∏ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º: —Ä–∞–π–æ–Ω, —É–ª–∏—Ü–∞, —Ü–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n" +
                "\n" +
                "    –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è: –ö–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∫–ª—é—á–∞—è –≤–∏–¥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —Ä–∞–π–æ–Ω, —É–ª–∏—Ü—É, —Ü–µ–Ω—É, –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.\n" +
                "\n" +
                "\uD83D\uDCDD –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏\n" +
                "\n" +
                "    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∏–ª–∏ –∞—Ä–µ–Ω–¥–µ, —É–∫–∞–∑—ã–≤–∞—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏.\n" +
                "\n" +
                "    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ: –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏: –≤–Ω–æ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ –∏—Ö –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n" +
                "\n" +
                "\uD83D\uDD0D –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n" +
                "\n" +
                "    –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.\n" +
                "\n" +
                "    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n" +
                "\n" +
                "\uD83D\uDCF1 –£–¥–æ–±—Å—Ç–≤–æ –æ–±—â–µ–Ω–∏—è\n" +
                "\n" +
                "    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤.\n" +
                "\n" +
                "    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Markdown –∏ HTML: –ß–∏—Ç–∞–±–µ–ª—å–Ω—ã–µ –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n" +
                "\n" +
                "\uD83D\uDD12 –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n" +
                "\n" +
                "    –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã, –∏ –±–æ—Ç —Å–æ–±–ª—é–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n" +
                "\n" +
                "    –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–æ—Ç–µ.\n" +
                "\n" +
                "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SmartAgentBot:\n" +
                "\n" +
                "  " +
                "\n" +
                "    –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.\n" +
                "\n" +
                "    –ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.\n" +
                "\n" +
                "SmartAgentBot ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Å—Ç—ã–º –∏ —É–¥–æ–±–Ω—ã–º!\n");

        executeMessage(message);
    }

    private void sendInfoAboutUser(long chatId, User user) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(String.valueOf(chatId));
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ù–∞–∑–∞–¥");
        row1.add("–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
        keyboardRows.add(row1);


        keyboardMarkup.setKeyboard(keyboardRows);
        sendMessage.setReplyMarkup(keyboardMarkup);
        sendMessage.setText(
                "<pre>" +
                        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n" +
                        " –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n" +
                        "   <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> " + user.getUsername() + "\n" +
                        "   <b>ID:</b> " + user.getId() + "\n" +
                        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî" +
                        "</pre>"
        );
        sendMessage.enableHtml(true); // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML

        executeMessage(sendMessage);
    }

    private void sendLoginAndRegisterButton(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row1 = new KeyboardRow();
        row1.add("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç \uD83D\uDD14");
        row1.add("–ü–æ–∏—Å–∫ \uD83D\uDD0D");
        keyboardRows.add(row1);

        // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ü–æ–º–æ—â—å \uD83C\uDD98");
        row2.add("–î–æ–±–∞–≤–∏—Ç—å ‚ûï");
        keyboardRows.add(row2);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        executeMessage(message);
    }

    private void executeMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("Error occurred: " + e.getMessage());
        }
    }

    private void prepareAndSendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ", e);
        }
    }


}
